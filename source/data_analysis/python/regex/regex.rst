.. role:: raw-latex(raw)
   :format: latex
..

.. contents::
   :depth: 3
..

简介
====

正则表达式的语法介绍

基本语句
========

**锚点：^ 和 $**
----------------

::

    ^The        匹配任何以“The”开头的字符串
    end$        匹配以“end”为结尾的字符串
    ^The end$   抽取匹配从“The”开始到“end”结束的字符串
    roar        匹配任何带有文本“roar”的字符串

**数量符：\*、+、？和 {}**
--------------------------

::

    abc*        匹配在“ab”后面跟着零个或多个“c”的字符串
    abc+        匹配在“ab”后面跟着一个或多个“c”的字符串
    abc?        匹配在“ab”后面跟着零个或一个“c”的字符串
    abc{2}      匹配在“ab”后面跟着两个“c”的字符串
    abc{2,}     匹配在“ab”后面跟着两个或更多“c”的字符串
    abc{2,5}    匹配在“ab”后面跟着2到5个“c”的字符串
    a(bc)*      匹配在“a”后面跟着零个或更多“bc”序列的字符串
    a(bc){2,5}  匹配在“a”后面跟着2到5个“bc”序列的字符串

**或运算符：\| 、 []**
----------------------

::

    a(b|c)     匹配在“a”后面跟着“b”或“c”的字符串
    a[bc]      匹配在“a”后面跟着“b”或“c”的字符串

**字符类：:raw-latex:`\d`、:raw-latex:`\d`、:raw-latex:`\s `和 .**
------------------------------------------------------------------

::

    \d         匹配数字型的单个字符 
    \w         匹配单个词字（字母加下划线
    \s         匹配单个空格字符（包括制表符和换行符） 
    .          匹配任意字符
    \b         匹配单词的开始或结束

反义
----

::

    \W  匹配任意不是字母，数字，下划线，汉字的字符
    \S  匹配任意不是空白符的字符
    \D  匹配任意非数字的字符
    \B  匹配不是单词开头或结束的位置
    [^x]    匹配除了x以外的任意字符
    [^aeiou]    匹配除了aeiou这几个字母以外的任意字符

懒惰限定符
----------

::

    *?  重复任意次，但尽可能少重复
    +?  重复1次或更多次，但尽可能少重复
    ??  重复0次或1次，但尽可能少重复
    {n,m}?  重复n到m次，但尽可能少重复
    {n,}?   重复n次以上，但尽可能少重复

Flags
-----

正则表达式通常以/abc/这种形式出现，其中搜索模式由两个反斜杠「/」分离。而在模式的结尾，我们通常可以指定以下
flag 配置或它们的组合：

::

    g（global）在第一次完成匹配后并不会返回结果，它会继续搜索剩下的文本
    m（multi line）允许使用^和$匹配一行的开始和结尾，而不是整个序列
    i（insensitive）令整个表达式不区分大小写（例如/aBc/i 将匹配 AbC）

中级语句
========

分组和捕获：()
--------------

::

    a(bc)           圆括弧会创建一个捕获性分组，它会捕获匹配项“bc”
    a(?:bc)*        使用 “?:” 会使捕获分组失效，只需要匹配前面的“a”
    a(?<foo>bc)     使用 “?<foo>” 会为分组配置一个名称

**方括弧表达式：[]**
--------------------

::

    [abc]            匹配带有一个“a”、“ab”或“ac”的字符串 -> 与 a|b|c 一样
    [a-c]            匹配带有一个“a”、“ab”或“ac”的字符串 -> 与 a|b|c 一样
    [a-fA-F0-9]      匹配一个代表16进制数字的字符串，不区分大小写
    [0-9]%           匹配在%符号前面带有0到9这几个字符的字符串
    [^a-zA-Z]        匹配不带a到z或A到Z的字符串，其中^为否定表达式

高级语句
========

\*\*边界符：:raw-latex:`\b `和 :raw-latex:`\B*`\*
-------------------------------------------------

::

    \babc\b          执行整词匹配搜索
    \Babc\B          只要是被单词字符环绕的模式就会匹配

**前向匹配和后向匹配：(?=) 和 (?<=)**
-------------------------------------

::

    d(?=r)       只有在后面跟着“r”的时候才匹配“d”，但是“r”并不会成为整个正则表达式匹配的一部分
    (?<=r)d      只有在前面跟着“r”时才匹配“d”，但是“r”并不会成为整个正则表达式匹配的一部分

    d(?!r)       只有在后面不跟着“r”的时候才匹配“d”，但是“r”并不会成为整个正则表达式匹配的一部分
    (?<!r)d      只有在前面不跟着“r”时才匹配“d”，但是“r”并不会成为整个正则表达式匹配的一部分

python常见的正则表达函数
========================

re.compile
----------

re模块中包含一个重要函数是compile(pattern [, flags])
，该函数根据包含的正则表达式的字符串创建\ **模式对象**\ 。可以实现更有效率的匹配。在直接使用字符串表示的正则表达式进行search,match和findall操作时，python会将字符串转换为正则表达式对象。而使用compile完成一次转换之后，在每次使用模式的时候就不用重复转换。当然，使用re.compile()函数进行转换后，re.search(pattern,
string)的调用方式就转换为 pattern.search(string)的调用方式

使用re.compile

::

    some_text = 'a,b,,,,c d'
    reObj = re.compile('[, ]+')
    reObj.split(some_text)
    #['a', 'b', 'c', 'd']

不使用re.compile

::

    some_text = 'a,b,,,,c d'
    re.split('[, ]+',some_text)
    #['a', 'b', 'c', 'd']

re.match
--------

::

    re.match(pattern,string,[,flags]) 从首字母开始开始匹配，string如果包含pattern子串，则匹配成功，返回Match对象，失败则返回None，若要完全匹配，pattern要以$结尾

re.findall
----------

::

    re.findall(pattern,string,[,flags]) 匹配的是一个模式在一个字符串中的所有实例然后以列表的形式返回它们

re.search
---------

::

    re.search(pattern,string,[,flags]) 匹配的是一个模式在一个字符串中的第一个实例，然后以 re 匹配对象的形式返回它

因为 re.search() 返回的是一个 re 匹配对象，所以我们必须首先为其应用
group() 函数。group() 函数的作用是将匹配对象转换成字符串。

与 re.findall() ，re.match()类似，re.search()
也有两个参数。第一个参数是所要匹配的模式，第二个是要在其中查找的字符串

**re.split**
------------

::

    address = re.findall("From:.*", fh)
    for item in address:
        for line in re.findall("\w\S*@.*\w", item):
            username, domain_name = re.split("@", line)
            print("{}, {}".format(username, domain_name))

我们遍历这些电子邮箱地址并使用 re 模块的 split() 函数以 @
符号为分割符将每个电子邮件一分为二

re.sub
------

::

    sender = re.search("From:.*", fh)
    address = sender.group()
    email = re.sub("From", "Email", address)
    print(address)
    print(email)

re.sub()
有三个参数。第一个是所要替换的子字符串，第二个是用来替换前者的字符串，第三个是主字符串本身
